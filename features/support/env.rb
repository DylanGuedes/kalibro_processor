require 'simplecov'
SimpleCov.start do
  coverage_dir 'coverage/cucumber'

  add_group "Models", "app/models"
  add_group "Controllers", "app/controllers"
  add_group "Helpers", "app/helpers"
  add_group "Mailers", "app/mailers"

  add_filter "/spec/"
  add_filter "/features/"
  add_filter "/config/"
end

# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require 'cucumber/rails'
# database_cleaner is set up manually below
Cucumber::Rails::Database.autorun_database_cleaner = false

# require 'capybara/poltergeist'
# Capybara.default_driver = :poltergeist
# Capybara.javascript_driver = :poltergeist

# Capybara defaults to CSS3 selectors rather than XPath.
# If you'd prefer to use XPath, just uncomment this line and adjust any
# selectors in your step definitions to use the XPath syntax.
# Capybara.default_selector = :xpath

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

# Setup database_cleaner.
# Ensure we can disable the transaction strategy for tests that spawn other
# processes/threads, otherwise data won't be visible to them. Ideally we'd just use
# before hooks to set the strategy, but they always run after Around hooks (too late).
# There is also no way to get the current strategy to restore it later.

require 'database_cleaner'

DatabaseCleaner.clean_with(:truncation)

Around('@no_transaction') do |scenario, block|
  DatabaseCleaner.strategy = :truncation
  DatabaseCleaner.cleaning(&block)
end

Around('~@no_transaction') do |scenario, block|
  DatabaseCleaner.strategy = :transaction
  DatabaseCleaner.cleaning(&block)
end

# Kalibro hooks
require 'kalibro_client/kalibro_cucumber_helpers/hooks'
KalibroClient::KalibroCucumberHelpers.clean_configurations

# Some steps access this module directly. Require it here so we don't need this line in every step definition that uses some class on this module.
require 'downloaders'
